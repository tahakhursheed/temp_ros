{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Transormations and Frames\n",
    "\n",
    "In this notebook, I will illustrate through examples how computation of frames and transformation can be achieved using Python. We will be using a numpy arrays data structure to define frames and perform operations on them.\n",
    "\n",
    "First, let us start with importing numpy arrays and the math library\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import math"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Translation Matrix\n",
    "\n",
    "Consider a robot at position (1,3) in the frame W2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "position_robot_w2 = np.array([0.1,0,-0.2])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "P_{W2}=  [ 0.1  0.  -0.2]\n"
     ]
    }
   ],
   "source": [
    "print (\"P_{W2}= \", position_robot_w2) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "assume that there is a translation from W1 to W2 of a vector [2,3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "translation_vector_w1_to_w2 =  [2 3]\n"
     ]
    }
   ],
   "source": [
    "translation_vector_w1_to_w2 = np.array([2,3])\n",
    "print (\"translation_vector_w1_to_w2 = \", translation_vector_w1_to_w2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Then, the position of the robot in the frame W1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "P_{W1}=  [3 6]\n"
     ]
    }
   ],
   "source": [
    "position_robot_w1 = position_robot_w2+translation_vector_w1_to_w2\n",
    "print (\"P_{W1}= \", position_robot_w1) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Rotation Matrix\n",
    "\n",
    "Let us assume that the angle of rotation between W1 and W2 is theta = 45 degrees.\n",
    "We assume that the position of the robot in W2 (1,5)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Find the rotation matrix from W1 to W2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.7853981633974483\n",
      "theta (rad) =  0.7071067811865476\n",
      "rotation matrix: \n",
      " [[ 0.52532199 -0.85090352]\n",
      " [ 0.85090352  0.52532199]]\n"
     ]
    }
   ],
   "source": [
    "theta = 45\n",
    "theta_radian = math.radians(45)\n",
    "print(theta_radian)\n",
    "print (\"theta (rad) = \",math.cos(theta_radian))\n",
    "rot_w1_to_w2 = np.array([[math.cos(theta), -math.sin(theta)],[ math.sin(theta),math.cos(theta)]])\n",
    "print (\"rotation matrix: \\n\",rot_w1_to_w2)\n",
    "position_robot_w2 = np.array([1,3])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[-2.02738858  2.42686949]\n"
     ]
    }
   ],
   "source": [
    "position_robot_w1 = np.dot(rot_w1_to_w2,position_robot_w2)\n",
    "print(position_robot_w1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Transformation Matrix\n",
    "\n",
    "Now, let us assume that we have a robot at coordinate $p_w2$=(5, 10).\n",
    "Consider that the transformation from W1 to W2 happens with a translation [10, 12] and with an angle -35 degrees. \n",
    "What is the position of the robot in the coordinate frame W1?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To solve this problem, we need first to compute the transformation matrix from W1 to W2. According to definition, it is written as"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "transform_w1_to_w2 = \n",
      "} [[ 0. -1.  0.  5.]\n",
      " [ 1.  0.  0. 10.]\n",
      " [ 0.  0.  1. 10.]\n",
      " [ 0.  0.  0.  1.]]\n"
     ]
    }
   ],
   "source": [
    "theta = math.radians(90)\n",
    "transform_w1_to_w2= np.array(\n",
    "\t[[math.cos(theta),math.sin(theta),0,0],\n",
    "     [-math.sin(theta),math.cos(theta),0,0],\n",
    "\t[0,0,1,0],\n",
    "\t[5, 10 ,10,1]]).transpose()\n",
    "np.set_printoptions(precision=3, suppress=True)\n",
    "print(\"transform_w1_to_w2 = \\n}\",transform_w1_to_w2)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "transform_w1_to_w2 = \n",
      " [[ 0.819  0.574 10.   ]\n",
      " [-0.574  0.819 12.   ]\n",
      " [ 0.     0.     1.   ]]\n"
     ]
    }
   ],
   "source": [
    "np.set_printoptions(precision=3, suppress=True)\n",
    "print(\"transform_w1_to_w2 = \\n\",transform_w1_to_w2)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Then, we can calculate the new location"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[ 5 10  1]\n"
     ]
    }
   ],
   "source": [
    "p_w2=np.array([5,10,1])\n",
    "print (p_w2.transpose())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[19.832 17.324  1.   ]\n"
     ]
    }
   ],
   "source": [
    "p_w1=np.dot(transform_w1_to_w2 , p_w2)\n",
    "print (p_w1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
